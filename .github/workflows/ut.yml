name: UnitTests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  ut:
    name: ${{ matrix.config.name }} 
    runs-on: ${{ matrix.config.os }} 
    env: 
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows MSVC",
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            generator: "Visual Studio 16 2019"
          }
        - { 
            name: "Ubuntu 20.04 GCC",
            os: ubuntu-20.04,
            build_type: "Release",
            cc: "gcc-11",
            cxx: "g++-11",
            packages: "g++-11 gcc-11 lcov ninja-build python3 python3-pip",
            generator: "Ninja"
          }
        - {
            name: "Ubuntu 20.04 Clang",
            os: ubuntu-20.04,
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            packages: "clang ninja-build python3 python3-pip",
            generator: "Ninja"
          }
        - {
            name: "MacOS Clang",
            os: macos-latest, 
            build_type: "Release",
            cc: "clang",
            cxx: "clang++", 
            generator: "Ninja" 
          }

    steps:
      - uses: actions/checkout@v2
      - name: Print Environment
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on Windows 
        if: startsWith(matrix.config.os, 'windows')
        run: | 
          choco install ninja cmake python3 pip
          ninja --version 
          cmake --version
      - name: Install GCC on Windows 
        if: startsWith(matrix.config.os, 'windows') && startsWith(matrix.config.cc, 'gcc')
        run: |
          choco install mingw
      - name: Install dependencies on Ubuntu 
        if: startsWith(matrix.config.os, 'ubuntu')
        run: | 
          sudo apt update
          sudo apt install -y ${{ matrix.config.packages }} 
          sudo pip3 install virtualenv
          ninja --version 
          cmake --version
      - name: Setup JDK 11
        if: startsWith(matrix.config.os, 'ubuntu') 
        uses: actions/setup-java@v1
        with: 
          java-version: 11 
      - name: Download and set up sonar-scanner
        if: startsWith(matrix.config.os, 'ubuntu') 
        env: 
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/ 
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Install dependencies on MacOS 
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install cmake ninja
          ninja --version 
          cmake --version 
          clang --version
      - name: Install VirtualEnv Mac/Ubuntu 
        if: startsWith(matrix.config.os, 'macos') || startsWith(matrix.config.os, 'ubuntu')
        run: | 
          sudo pip3 install virtualenv
      - name: Install VirtualEnv Windows 
        if: startsWith(matrix.config.os, 'windows')
        run: |
            pip3.exe install virtualenv
      - name: Configure Tests
        shell: bash 
        run: |
          mkdir build 
          cd build && cmake .. -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DENABLE_COVERAGE=ON -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -G "${{ matrix.config.generator }}"
      - name: Build UT 
        shell: bash 
        working-directory: build
        run: cmake --build . --config ${{ matrix.config.build_type }}
      - name: Run UT
        shell: bash 
        working-directory: build 
        run: ctest
      - name: Get coverage 
        shell: bash 
        working-directory: build
        if: startsWith(matrix.config.os, 'ubuntu') && startsWith(matrix.config.cc, 'gcc')
        run: | 
          echo `pwd`
          ninja run_lcov

      - name: Configure NodeJS 
        uses: actions/setup-node@v1 
        if: startsWith(matrix.config.os, 'ubuntu') && startsWith(matrix.config.cc, 'gcc')
        with: 
          node-version: 10.x
      - name: Check node version  
        if: startsWith(matrix.config.os, 'ubuntu') && startsWith(matrix.config.cc, 'gcc')
        shell: bash
        run: |
          node --version

      - name: Run Sonar Scanner
        if: startsWith(matrix.config.os, 'ubuntu') 
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}        
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_HOST_URL }}" --define sonar.cfamily.compile-commands=build/compile_commands.json

